datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  ok                 Boolean?
  state              String?  @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  exams     Exam[]
  examDates ExamDatesOnUsers[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exam {
  name     String         @id
  slug     String         @unique
  dates    ExamDate[]
  users    User[]
  sessions StudySession[]
}

model ExamDate {
  id       String             @unique @default(cuid())
  date     DateTime
  users    ExamDatesOnUsers[]
  exam     Exam               @relation(fields: [examName], references: [name])
  examName String

  @@id([date, examName])
}

model ExamDatesOnUsers {
  examDateId       String
  examDate         ExamDate @relation(fields: [examDateDate, examDateExamName], references: [date, examName])
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  examDateDate     DateTime
  examDateExamName String

  @@id([examDateId, userId])
}

model StudySession {
  id       String   @id @default(cuid())
  exam     Exam     @relation(fields: [examName], references: [name])
  time     DateTime
  examName String
}
